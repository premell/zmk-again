/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  tapping_term_ms = <500>;
};

// &sl {
//     release-after-ms = <2000>;
// };


// #############      SWEDISH COMPATIBLE SPECIAL CHARACTERS        #################
#define SE_AA LEFT_BRACE
#define SE_AE SQT
#define SE_OE COLON

#define SE_PLUS KC_MINUS // +
//#define SE_ACUT KC_EQL  // ´ (dead)
//#define SE_DIAE KC_RBRC // ¨ (dead)
#define SE_LT BACKSLASH // <
#define SE_MINUS KP_SLASH // -
#define SE_SQT POUND // '


// SHIFTED SYMBOLS
#define SE_EXCLAMATION LS(KP_N1)    // !
#define SE_DQT LS(KP_N2)    // "
#define SE_HASH LS(KP_N3)    // #
//#define SE_CURR S(KP_N4)    // ¤
#define SE_PERCENT LS(KP_N5)    // %
#define SE_AND LS(KP_N6)    // &
#define SE_SLASH LS(KP_N7)    // /
#define SE_LEFT_PARANTHESIS LS(KP_N8)    // (
#define SE_RIGHT_PARANTHESIS LS(KP_N9)    // )
#define SE_EQUAL  LS(KP_N0)    // =
#define SE_QUESTION LS(SE_PLUS) // ?
#define SE_GRAVE  LS(SE_ACUT) // ` (dead)
#define SE_CARET LS(SE_DIAE) // ^ (dead)
#define SE_STAR LS(SE_QUOT) // *
#define SE_GT LS(SE_LABK) // >
#define SE_COLON LS(KP_COMMA) // ;
#define SE_SEMICOLON LS(KP_DOT)  // :
#define SE_UNDERSCORE LS(KP_MINUS) // _

// AltGr symbols
#define SE_AT_SIGN   LS(KP_N2)    // @
//#define SE_PND  ALGR(KP_N3)    // £
#define SE_DOLLAR  LS(KP_N4)    // $
//#define SE_EURO ALGR(KP_N5)    // €
#define SE_LEFT_BRACE LS(KP_N7)    // {
#define SE_LEFT_BRACKET LS(KP_N8)    // [
#define SE_RIGHT_BRACKET LS(KP_N9)    // ]
#define SE_RIGHT_BRACE LS(KP_N0)    // }
#define SE_BACKSLASH LS(SE_PLUS) // (backslash)
#define SE_TILDE LS(SE_DIAE) // ~ (dead)
#define SE_PIPE LS(SE_LABK) // |




// #############      LAYERS        #################

#define SYM_L 1
#define NAV_L 2
#define NAV2_L 3
#define OTHER_L 4

// #############      WINDOW KEYS        #################

// Desktop and tab navigation shortcuts
#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// Generic bindings
#define KILL_WINDOW  LA(F4)
#define MAXIMIZE  LG(UP)
#define MINIMIZE  LG(DOWN)

// Linux specific navigation 
#define DESKTOP_PREV   LG(ESC)
#define DESKTOP_SPEC   LG(O)

#define WINDOW_1   LG(1)
#define WINDOW_2   LG(2)
#define WINDOW_3   LG(3)
#define WINDOW_4   LG(4)
#define WINDOW_5   LG(5)
#define WINDOW_6   LG(6)
#define WINDOW_7   LG(7)
#define WINDOW_8   LG(8)
#define WINDOW_9   LG(9)

#define SEND_W_TO_1   LG(LS(1))
#define SEND_W_TO_2   LG(LS(2))
#define SEND_W_TO_3   LG(LS(3))
#define SEND_W_TO_4   LG(LS(4))
#define SEND_W_TO_5   LG(LS(5))
#define SEND_W_TO_6   LG(LS(6))
#define SEND_W_TO_7   LG(LS(7))
#define SEND_W_TO_8   LG(LS(8))
#define SEND_W_TO_9   LG(LS(9))

#define ROT_LAYOUT          LG(SPACE)
#define TOGGLE_FLOATING     LG(LC(SPACE))
#define MOVE_TO_MASTER      LG(LC(RET))
#define ROTATE_WINDOW_LT    LG(LS(J))
#define ROTATE_WINDOW_RT    LG(LS(K))

#define UN_MINIMIZE     LG(LC(N))

#define SHRINK_WIDTH    LG(LA(H))
#define EXPAND_WIDTH    LG(LA(L))
#define INC_COL         LG(LC(H))
#define DEC_COL         LG(LC(L))
#define INC_MASTER      LG(LS(H))sk
#define DEC_MASTER      LG(LS(L))

// TODO ADD VIEW TAG? 
// TODO ADD BIDDIRECTIONAL CLIENT FOCUS
// TODO ADD AND START USING TMUX
// TODO POWER DOWN






/ { 
    combos {
        compatible = "zmk,combos";
        // LEFT ROW 2
         combo_back_word {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LCTRL &kp BACKSPACE>;
        };

        // RIGHT ROW 1
          combo_tab {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp TAB>;
        };
         combo_aa {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp SE_AA>;
        };
         combo_ae {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp SE_AE>;
        };
            combo_oe {
            timeout-ms = <50>;
            key-positions = <8 9>;
             bindings = <&kp SE_OE>;
        };

        // RIGHT ROW 2
        combo_del {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DELETE>;
        };
         combo_back {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp BACKSPACE>;
        };
            combo_return {
            timeout-ms = <50>;
            key-positions = <17 18>;
             bindings = <&kp RETURN>;
        };
            combo_esc {
            timeout-ms = <50>;
            key-positions = <18 19>;
             bindings = <&kp ESCAPE>;
        };
       
        // RIGHT ROW 3
        combo_left {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LEFT_ARROW>;
        };
         combo_down {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp DOWN_ARROW>;
        };
            combo_up {
            timeout-ms = <50>;
          key-positions = <27 28>;
            bindings = <&kp UP_ARROW>;
        };
            combo_right {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp RIGHT_ARROW>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };


    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap  {
                compatible = "zmk,keymap";





        default_layer {
            bindings = <
                &kp J          &kp G        &kp M       &kp P          &kp SE_SQT                &hm SE_LEFT_BRACE SE_LEFT_PARENTHESIS        &hm SE_PLUS SE_EQUAL        &hm SE_SLASH SE_GT        &hm SE_QUESTION SE_EXCLAMATION     &hm SE_SQT SE_DQT
                &hm LSHIFT R   &hm LCTRL S  &hm LGUI N  &hm LALT D     &kp B         &hm COMMA PERIOD                       &hm LALT A            &hm RGUI E        &hm RCTRL I                 &hm RSHFT H
                &hm Z X        &hm Q F      &kp L       &kp C          &kp W         &hm SE_MINUS SE_UNDERSCORE                   &kp U                 &kp O             &kp Y                       &kp K
                                                        &sl NAV_L      &kp T         &kp SPACE                              &sl SYM_L
            >;
        };

        sym_layer {
            bindings = <
                &kp KP_N1     &kp KP_N2     &kp KP_N3      &kp KP_N4         &kp KP_N5     &kp KP_N6          &kp KP_N7     &kp KP_N8     &kp KP_N9      &kp KP_N0               
                &kp SE_LEFT_PARENTHESIS     &kp SE_RIGHT_PARENTHESIS       &kp COLON     &kp SE_DOLLAR                   &kp SE_PIPE    &kp SE_GRAVE             &kp SE_HASH      &kp SE_PERCENT     &kp SE_LEFT_BRACE     &kp SE_RIGHT_BRACE
                &kp SE_LEFT_BRACKET         &kp SE_RIGHT_BRACKET         &kp SE_SEMICOLON   &kp SE_AT_SIGN              &hm SE_BACKSLASH SE_STAR  &kp SE_TILDE             &kp SE_CARET            &kp SE_AND         &kp SE_LT     &kp SE_GT
                                                                  &sl NAV_L          &none         &none             &sl SYM_L
            >;
        };


        nav_layer {
            bindings = <
                &kp WINDOW_1        &kp WINDOW_2        &kp WINDOW_3       &kp WINDOW_4          &kp WINDOW_5       &kp WINDOW_6     &kp WINDOW_7     &kp WINDOW_8     &kp WINDOW_9          &none
                &kp DESKTOP_SPEC     &kp DESKTOP_PREV     &kp DESKTOP_LT      &kp DESKTOP_RT         &kp ROT_LAYOUT             &kp KILL_WINDOW   &kp ROTATE_WINDOW_LT       &kp ROTATE_WINDOW_RT   &kp MOVE_TO_MASTER       &none
                &kp TAB_LT     &kp TAB_RT     &kp WINDOW_LT       &kp WINDOW_RT      &kp TOGGLE_FLOATING                 &kp MAXIMIZE       &kp MINIMIZE        &kp UN_MINIMIZE    &kp SHRINK_WIDTH     &kp EXPAND_WIDTH
                                                  &sl NAV_L          &none         &sl NAV2_L             &sl SYM_L

            >;
        };

        nav2_layer {
            bindings = <
                &kp SEND_W_TO_1        &kp SEND_W_TO_2        &kp SEND_W_TO_3       &kp SEND_W_TO_4          &kp SEND_W_TO_5       &kp SEND_W_TO_6     &kp SEND_W_TO_7     &kp SEND_W_TO_8     &kp SEND_W_TO_9          &none
                &kp DEC_COL     &kp INC_COL     &kp DEC_MASTER      &kp INC_MASTER         &none                   &kp F1  &kp F2 &kp F3  &kp F4  &kp F5 
                &sk LSHIFT      &sk LCTRL     &sk LGUI       &sk LALT                    &none                       &kp F6 &kp F7 &kp F8  &kp F9  &kp F10 
                                                        &none     &none       &kp F11  &kp F12
                
            >;
        };
   
   
        other_layer {
            bindings = <
                &none     &none     &none      &none          &kp C_POWER       &none           &kp C_PREV         &kp C_PLAY_PAUSE      &kp C_NEXT     &none
                &kp CAPSLOCK     &none     &none      &kp C_SLEEP    &kp C_RESET       &kp C_MUTE           &kp C_VOLUME_DOWN         &kp   C_VOLUME_UP    &none     &none
                &none     &none     &none      &none          &none       &none           &none       &kp  C_BRIGHTNESS_DEC     &kp    C_BRIGHTNESS_INC  &none
                                                  &none          &none       &none           &none
            >;
        };
      
	};
};
