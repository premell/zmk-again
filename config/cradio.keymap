/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  tapping_term_ms = <500>;
};
&lt {
  tapping_term_ms = <300>;
            flavor = "tap-preferred";

};
 &sl {
     release-after-ms = <2000>;
 };


// TODO change macros to these

// #############      SWEDISH COMPATIBLE SPECIAL CHARACTERS        #################
#define SE_AA LEFT_BRACKET
#define SE_AE SQT
#define SE_OE SEMICOLON

// #############      LAYERS        #################

#define SYM_L 1
#define NAV_L 2
#define NAV2_L 3
#define UTIL_L 4

// #############      WINDOW KEYS        #################

// Desktop and tab navigation shortcuts
#define DESKTOP_LT   LC(LG(LEFT))
#define DESKTOP_RT   LC(LG(RIGHT))
#define WINDOW_LT    LA(LS(TAB))
#define WINDOW_RT    LA(TAB)
#define TAB_LT       LC(LS(TAB))
#define TAB_RT       LC(TAB)

// Generic bindings
#define KILL_WINDOW  LA(F4)
#define MAXIMIZE  LG(UP)
#define MINIMIZE  LG(DOWN)

// Linux specific navigation 
#define DESKTOP_PREV   LG(ESC)
#define DESKTOP_SPEC   LG(O)

#define WINDOW_1   LG(NUMBER_1)
#define WINDOW_2   LG(NUMBER_2)
#define WINDOW_3   LG(NUMBER_3)
#define WINDOW_4   LG(NUMBER_4)
#define WINDOW_5   LG(NUMBER_5)
#define WINDOW_6   LG(NUMBER_6)
#define WINDOW_7   LG(NUMBER_7)
#define WINDOW_8   LG(NUMBER_8)
#define WINDOW_9   LG(NUMBER_9)

#define SEND_W_TO_1   LG(LS(NUMBER_1))
#define SEND_W_TO_2   LG(LS(NUMBER_2))
#define SEND_W_TO_3   LG(LS(NUMBER_3))
#define SEND_W_TO_4   LG(LS(NUMBER_4))
#define SEND_W_TO_5   LG(LS(NUMBER_5))
#define SEND_W_TO_6   LG(LS(NUMBER_6))
#define SEND_W_TO_7   LG(LS(NUMBER_7))
#define SEND_W_TO_8   LG(LS(NUMBER_8))
#define SEND_W_TO_9   LG(LS(NUMBER_9))

#define ROT_LAYOUT          LG(SPACE)
#define TOGGLE_FLOATING     LG(LC(SPACE))
#define MOVE_TO_MASTER      LG(LC(RET))
#define ROTATE_WINDOW_LT    LG(LS(J))
#define ROTATE_WINDOW_RT    LG(LS(K))

#define UN_MINIMIZE     LG(LC(N))

#define SHRINK_WIDTH    LG(LA(H))
#define EXPAND_WIDTH    LG(LA(L))
#define INC_COL         LG(LC(H))
#define DEC_COL         LG(LC(L))
#define INC_MASTER      LG(LS(H))
#define DEC_MASTER      LG(LS(L))

// TODO ADD VIEW TAG? 
// TODO ADD BIDDIRECTIONAL CLIENT FOCUS
// TODO ADD AND START USING TMUX
// TODO POWER DOWN




// Swedish keys
#define SE_EXCLAMATION  EXCLAMATION
#define SE_aa LEFT_BRACE
#define SE_AA RIGHT_BRACKET
#define SE_COLON LEFT_BRACKET
#define SE_PERIOD GREATER_THAN
#define SE_SEMI_COLON PERIOD
#define SE_COMMA LESS_THAN
#define SE_ae DOUBLE_QUOTES
#define SE_AE COMMA
#define SE_OE SINGLE_QUOTE
#define SE_oe COLON
#define SE_GT SEMICOLON
#define SE_LT PIPE2
#define SE_STAR NON_US_BACKSLASH 
#define SE_SINGLE_QUOTE PIPE 
#define SE_UNDERSCORE BACKSLASH 
#define SE_MINUS QUESTION
#define SE_QUESTION SLASH 
#define SE_PLUS UNDERSCORE
#define SE_GRAVE MINUS
#define SE_EQUAL EQUAL 
#define SE_RIGHT_PARENTHESIS RIGHT_PARENTHESIS 
#define SE_SLASH  LEFT_PARENTHESIS 
#define SE_AMPERSAND AMPERSAND
#define SE_PERCENT PERCENT 
#define SE_HASH HASH 
#define SE_AT_SIGN DOUBLE_QUOTES 

//GRAVE TILDE NON_US_HASH


// RIGHT_BRACE  => ¨
// PLUS => ´
//DOLLAR => ¤


// TODO add å ä and ö to the keyboard
 /*         combto_aa {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp SE_AA>;
        };
         combo_ae {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp SE_AE>;
        };
            combo_oe {
            timeout-ms = <50>;
            key-positions = <8 9>;
             bindings = <&kp SE_OE>;
        }; */

// Is it possible to override defualt keys, like changing win + j to win + tab?

/ { 
    combos {
        compatible = "zmk,combos";
        // LEFT ROW 2
         /*combo_back_word {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp LCTRL &kp BACKSPACE>;
        };

        // RIGHT ROW 1
          combo_tab {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp TAB>;
        };*/


        // RIGHT ROW 2
        /*combo_del {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp DELETE>;
        };
         combo_back {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp BACKSPACE>;
        };*/
            combo_return {
            timeout-ms = <50>;
            key-positions = <5 6>;
                         bindings = <&kp RETURN>;
        };
            combo_esc {
            timeout-ms = <50>;
            key-positions = <7 8>;
                         bindings = <&kp ESCAPE>;
        };
        // TO REMOVE THE DELAY FROM HOMEROW KEYS
            combo_z {
            timeout-ms = <50>;
            key-positions = <8 9>;
                         bindings = <&kp Z>;
        };
       
        // RIGHT ROW 3
        /*
        combo_left {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LEFT_ARROW>;
        };
         combo_down {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp DOWN_ARROW>;
        };
            combo_up {
            timeout-ms = <50>;
          key-positions = <27 28>;
            bindings = <&kp UP_ARROW>;
        };
            combo_right {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp RIGHT_ARROW>;
        };*/
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
    macros {
        back_word: back_word {
            label = "back_word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp BACKSPACE>
                , <&macro_release &kp LCTRL>
                ;
        };
          cut: cut {
            label = "cut";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
          yank: yank {
            label = "yank";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };
            uppercase_D: uppercase_D {
            label = "uppercase_D";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHIFT>
                , <&macro_tap &kp D>
                , <&macro_release &kp LSHIFT>
                ;
        };
          uppercase_Y: uppercase_Y {
            label = "test_uppercase_Y";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHIFT>
                , <&macro_tap &kp Y>
                , <&macro_release &kp LSHIFT>
                ;
        };
    };


    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap  {
                compatible = "zmk,keymap";
                //&hm QUESTION EXCLAMATION
                //hm SQT DQT
       		
        /* default_layer { */
        /*     bindings = < */
        /*         &kp Q          &kp G        &kp M       &kp P          &kp V      &hm PLUS EQUAL      &kp J             &kp K                &hm LEFT_BRACE LEFT_PARENTHESIS        &hm RIGHT_BRACE RIGHT_PARENTHESIS */
        /*         &hm LCTRL R   &hm LSHIFT S  &hm LGUI N  &hm LALT D     &kp B         &hm COMMA PERIOD                       &hm LALT A            &hm RGUI E        &hm RSHFT I                 &hm RCTRL H */
        /*         &kp X        &kp F      &kp L       &kp C          &kp W         &hm MINUS UNDERSCORE                   &kp U                 &kp O             &kp Y                      &kp BACKSPACE */
        /*                                                 &sl NAV_L      &lt UTIL_L T        &kp SPACE                              &sl SYM_L */
        /*     >; */
        /* }; */


        /* default_layer { */
        /*     bindings = < */
        /*       &kp EXCLAMATION &kp AT_SIGN &kp HASH &kp DOLLAR &kp PERCENT &kp CARET &kp AMPERSAND &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp EQUAL &kp PLUS &kp MINUS &kp UNDERSCORE &kp SLASH &kp QUESTION &kp BACKSLASH &kp PIPE &kp NON_US_BACKSLASH &kp PIPE2 &kp SEMICOLON &kp COLON &kp SINGLE_QUOTE &kp DOUBLE_QUOTES &kp COMMA &kp LESS_THAN &kp PERIOD &kp GREATER_THAN &kp LEFT_BRACKET &kp LEFT_BRACE &kp RIGHT_BRACKET &kp RIGHT_BRACE &kp GRAVE &kp TILDE &kp NON_US_HASH   */
        /*     >; */
        /* }; */


        default_layer {
            bindings = <
   

&kp SE_EXCLAMATION
&kp SE_aa
&kp SE_AA
&kp SE_COLON
&kp SE_PERIOD
&kp SE_SEMI_COLON
&kp SE_COMMA
&kp SE_ae
&kp SE_AE
&kp SE_OE
&kp SE_oe
&kp SE_GT
&kp SE_LT
&kp SE_STAR
&kp SE_SINGLE_QUOTE
&kp SE_UNDERSCORE
&kp SE_MINUS
&kp SE_QUESTION
&kp SE_PLUS
&kp SE_GRAVE
&kp SE_EQUAL
&kp SE_RIGHT_PARENTHESIS
&kp SE_SLASH
&kp SE_AMPERSAND
&kp SE_PERCENT
&kp SE_HASH
&kp SE_AT_SIGN
&kp a
&kp a
&kp a
&kp a
&kp a
&kp a
&kp a
&kp a
         >;
        };


        // ! " # ¤ % & / ) = ´ ` + ? - _ ' * < > ö Ö ä Ä , ; . : å Å ¨

        sym_layer {
            bindings = <
                &kp DQT     &kp SQT     &kp QUESTION      &kp   EXCLAMATION       &none     &none          &none     &none     &none      &none               
                &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS       &kp COLON     &kp DOLLAR                   &kp PIPE    &kp GRAVE             &kp HASH      &kp PERCENT     &kp LEFT_BRACE     &kp RIGHT_BRACE
                &kp LEFT_BRACKET         &kp RIGHT_BRACKET         &kp SEMICOLON   &kp AT_SIGN              &hm BACKSLASH STAR  &kp TILDE             &kp CARET            &kp AMPERSAND         &kp LT     &kp GT
                                                                  &sl NAV_L          &none         &none             &sl SYM_L
            >;
        };

        nav_layer {
            bindings = <
                         &none       &none     &none     &none     &none          &kp ROT_LAYOUT             &kp KILL_WINDOW   &kp ROTATE_WINDOW_LT       &kp ROTATE_WINDOW_RT   &kp MOVE_TO_MASTER       
                &kp DESKTOP_LT     &kp DESKTOP_RT     &kp  WINDOW_LT     &kp WINDOW_RT     &none  &none  &kp WINDOW_1        &kp WINDOW_2        &kp WINDOW_3       &kp WINDOW_4     
                &none     &none     &none        &kp TOGGLE_FLOATING &none                        &none       &kp DESKTOP_PREV        &kp DESKTOP_SPEC    &kp SHRINK_WIDTH     &kp EXPAND_WIDTH
                                                  &sl NAV_L          &none         &none             &sl SYM_L
            >;
        };
        // TODO improve this
        nav2_layer {
   bindings = <
                   &kp SEND_W_TO_1        &kp SEND_W_TO_2        &kp SEND_W_TO_3       &kp SEND_W_TO_4          &kp SEND_W_TO_5       &kp SEND_W_TO_6     &kp SEND_W_TO_7     &kp SEND_W_TO_8     &kp SEND_W_TO_9          &none
                &kp DEC_COL     &kp INC_COL     &kp DEC_MASTER      &kp INC_MASTER          &kp F1  &kp F2 &kp F3  &kp F4  &kp F5
                 &sk LSHIFT      &sk LCTRL     &sk LGUI       &sk LALT                    &none                       &kp F6 &kp F7 &kp F8  &kp F9  &kp F10  
                                                         &none     &none       &kp F11  &kp F12 
            >;
        };



        UTIL_L {
            bindings = <
                &kp DELETE     &none     &cut      &yank       &none                        &none               &kp J     &kp K  &kp G         &none
                 &hm LCTRL NUMBER_1     &hm LSHIFT NUMBER_2     &kp NUMBER_3      &kp NUMBER_4   &kp NUMBER_5  &kp NUMBER_6         &kp NUMBER_7     &kp NUMBER_8     &kp NUMBER_9      &kp NUMBER_0
                &none &none     &kp TAB     &kp BACKSPACE       &none          &none           &kp LEFT_ARROW         &kp DOWN_ARROW      &kp UP_ARROW      &kp RIGHT_ARROW    
                                                  &none          &none       &kp SPACE         &none
            >;
        }; 
    };
};
